apply plugin: 'com.android.application'
apply plugin: 'com.chaquo.python'


def REPO_ROOT = "../.."

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "org.haobtc.wallet"
        minSdkVersion 21 // android 5.0
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def ecVersion = null
        file("$REPO_ROOT/electrum/version.py").eachLine {
            def matcher = it =~ / *ELECTRUM_VERSION *= *'([0-9.]+)'.*/
            if (matcher.matches()) {
                ecVersion = matcher.group(1)
            }
        }
        if (ecVersion == null) {
            throw new GradleException("Couldn't find version number")
        }
        def BUILD_NUM = 0
        versionName "$ecVersion-$BUILD_NUM"
        def verParsed = ecVersion.split(/\./).collect { Integer.parseInt(it) }
        versionCode = (verParsed[0] * 1000000) + (verParsed[1] * 10000) + (verParsed[2] * 100) + BUILD_NUM

        python {
            pip {
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements.txt"
                install "-r", "$REPO_ROOT/contrib/deterministic-build/requirements-android.txt"
            }
            pyc {
                src true
                pip true
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    dataBinding.enabled = true
    sourceSets {
        main {
            python {
                srcDir REPO_ROOT
                include "electrum/**"                               // In ../.. (renamed below)
                include("chaquopy/**", "electrum_gui/**",  // In src/main/python
                        "electrum_plugins/**")
                exclude "**/*.po", "**/*.pot"

                srcDir "src/main/trezor/python-trezor/src"
                include "trezorlib/**"
            }
        }
    }
    flavorDimensions "version"
    productFlavors {
        MainNet {
            buildConfigField "boolean", "testnet", "false"
        }
        TestNet {
            buildConfigField "boolean", "testnet", "true"
        }
    }
    lintOptions {

        abortOnError false

        disable "MissingTranslation"
    }
    def keystore = file("../keystore.jks")
    if (keystore.exists()) {
        signingConfigs {
            config {
                storeFile keystore
                keyAlias "key0"
                keyPassword "android"
                storePassword "android"
            }
        }
        buildTypes.all { it.signingConfig signingConfigs.config }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "bixin-${variant.versionName}.apk"
        }
    }
}

afterEvaluate {
    def stringsTask = task("generateStrings", type: Exec) {
        def pyVersion = "3"
        if (System.getProperty("os.name").startsWith("Windows")) {
            executable "py"
            args "-$pyVersion"
        } else {
            executable "python$pyVersion"
        }
        args "generate_strings.py"
    }

    for (variant in android.applicationVariants) {
        // Rename directories to match package names, like package_dir does in setup.py.
        def task = tasks.getByName("merge${variant.name.capitalize()}PythonSources")
        def dstDir = task.destinationDir
        task.doLast {
            def src = "$dstDir/electrum"
            def dst = "$dstDir/electrum"
            if (!file(src).renameTo(dst)) {
                throw new GradleException("Failed to rename $src to $dst")
            }
        }

        // Automatically generate strings the first time the app is built. To regenerate them
        // later, either delete values/strings.xml and rebuild the app, or simply rerun the
        // `generateStrings` task manually.
        if (!file("src/main/res/values/strings.xml").exists()) {
            tasks.getByName("generate${variant.name.capitalize()}Resources")
                    .dependsOn(stringsTask)
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.github.yuzhiqiang1993:zxing:2.2.5' // qrcode
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    def acraVersion = "5.2.0"
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "ch.acra:acra-http:$acraVersion"
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //Picasso
    implementation 'com.squareup.picasso:picasso:2.5.2'
    //immersionbar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    //adpter
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    //OKhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.zhy:okhttputils:2.0.0'
    implementation 'org.xutils:xutils:3.5.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    //autosize
    implementation 'me.jessyan:autosize:0.9.1'
    //gson
    implementation 'com.google.code.gson:gson:2.8.5'

    //Eventbus
    implementation 'org.greenrobot:eventbus:3.0.0'

    //wheel_viewpager
    implementation 'com.github.ThirdGoddess:GoddessTNT:v1.3'
}
repositories {
    mavenCentral()
}
